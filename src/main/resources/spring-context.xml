<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd 
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<!-- Enables the Spring MVC @Controller programming model -->
	<context:annotation-config />
	<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。 -->
	<context:component-scan base-package="com.ice"><!-- base-package 
			如果多个，用“,”分隔 -->
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<task:annotation-driven />
	<bean
		class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />

	<bean id="propertyConfigurer"
		class="com.ice.jyzq.util.EncryptablePropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<!-- <value>classpath:log4j.properties</value> <value>classpath:neo4j.properties</value> -->
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>

	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- 配置 JSR303 Bean Validator 定义 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<bean id="myDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 用户名 -->
		<property name="user" value="${connection.username}" />
		<!-- 用户密码 -->
		<property name="password" value="${connection.password}" />
		<property name="driverClass" value="${driverClassName}" />
		<property name="jdbcUrl" value="${connection.url}" />

		<!--连接池中保留的最大连接数。默认值: 15 -->
		<property name="maxPoolSize" value="20" />
		<!-- 连接池中保留的最小连接数，默认为：3 -->
		<property name="minPoolSize" value="2" />
		<!-- 初始化连接池中的连接数，取值应在minPoolSize与maxPoolSize之间，默认为3 -->
		<property name="initialPoolSize" value="2" />

		<!--最大空闲时间，60秒内未使用则连接被丢弃。若为0则永不丢弃。默认值: 0 -->
		<property name="maxIdleTime" value="60" />

		<!-- 当连接池连接耗尽时，客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒。默认: 
			0 -->
		<property name="checkoutTimeout" value="3000" />

		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 -->
		<property name="acquireIncrement" value="2" />

		<!--定义在从数据库获取新连接失败后重复尝试的次数。默认值: 30 ；小于等于0表示无限次 -->
		<property name="acquireRetryAttempts" value="0" />

		<!--重新尝试的时间间隔，默认为：1000毫秒 -->
		<property name="acquireRetryDelay" value="1000" />

		<!--关闭连接时，是否提交未提交的事务，默认为false，即关闭连接，回滚未提交的事务 -->
		<property name="autoCommitOnClose" value="false" />

		<!--c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试使用。默认值: 
			null -->
		<!-- <property name="automaticTestTable" value="Test" /> -->

		<!--如果为false，则获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常，但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。默认: 
			false -->
		<!-- <property name="breakAfterAcquireFailure">false</property> -->

		<!--每60秒检查所有连接池中的空闲连接。默认值: 0，不检查 -->
		<!-- <property name="idleConnectionTestPeriod">60</property> -->
		<!--c3p0全局的PreparedStatements缓存的大小。如果maxStatements与maxStatementsPerConnection均为0，则缓存不生效，只要有一个不为0，则语句的缓存就能生效。如果默认值: 
			0 -->
		<!-- <property name="maxStatements">100</property> -->
		<!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。默认值: 0 -->
		<!-- <property name="maxStatementsPerConnection"></property> -->
	</bean>

	<!-- Hibernate对Jpa的实现 -->
	<bean id="hibernateJpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />

	<!-- 定义实体管理器工厂 Jpa配置 LocalContainerEntityManagerFactoryBean这个选项Spring扮演了容器的角色。完全掌管JPA -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<!-- 指定数据源 -->
		<property name="dataSource" ref="myDataSource" />
		<!-- 指定Jpa持久化实现厂商类,这里以Hibernate为例 -->
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
		<!-- 指定Entity实体类包路径 -->
		<property name="packagesToScan">
			<array>
				<value>com.ice.server.bean</value>
			</array>
		</property>
		<!-- 指定JPA属性；如Hibernate中指定是否显示SQL的是否显示、方言等 -->
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.NoCacheProvider</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">true</prop>
			</props>
		</property>
	</bean>

	<jpa:repositories base-package="com.ice.server.dao"
		entity-manager-factory-ref="entityManagerFactory"
		transaction-manager-ref="transactionManagerjpa" />

	<bean id="transactionManagerjpa" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

</beans:beans>
